/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package primus;

option java_package = "com.bytedance.primus.proto";
option java_generate_equals_and_hash = true;

import "google/protobuf/wrappers.proto";
import "primus_common.proto";
import "primus_input.proto";
import "primus_runtime.proto";

enum InputPolicy {
  ENV = 0;
  STREAMING = 1;
}

enum RestartType {
  ON_FAILURE = 0;
  NEVER = 1;
  ALWAYS = 2;
}

enum MaxFailurePolicy {
  FAIL_APP = 0;
  FAIL_ATTEMPT = 1;
  NONE = 2;
}

message CommonFailover {
  RestartType restart_type = 1;
  int32 max_failure_times = 2;
  MaxFailurePolicy max_failure_policy = 3;
  int32 max_global_role_failure_times = 4;
}

message HybridDeploymentFailover {
  CommonFailover common_failover = 1;
}

message Failover {
  oneof failover_policy {
    CommonFailover common_failover_policy = 1;
    HybridDeploymentFailover hybrid_deployment_failover_policy = 2;
  }
}

message Attribute {
  bool has_gpu = 1;
  string gpu_name = 2;
  string pod = 3;
  map<string, string> pairs = 4;
}

message ScheduleStrategy {
  enum RoleCategory {
    UNKNOWN = 0;
    PS = 1;
    WORKER = 2;
  }
  int32 max_replicas_per_node = 1;
  int32 executor_delay_start_seconds = 2;
  ElasticResource elastic_resource = 3;
  RoleCategory role_category = 4;
}

message ElasticResource {
  float extend_mem_ratio = 1;
  int64 extend_mem_size = 2;
  int64 max_mem_size = 3;
  int64 min_mem_size = 4;
}

message Role {
  string role_name = 1;
  int32 num = 2;
  int32 vcores = 3;
  int32 memory_mb = 4;
  int32 gpu_num = 5;
  int32 jvm_memory_mb = 6;
  string java_opts = 7;
  // start command of user script
  string command = 8;
  map<string, string> env = 9;
  InputPolicy input_policy = 10;
  Failover failover = 11;
  int32 local_restart_times = 12;
  int32 success_percent = 13;
  Attribute attribute = 14;
  int32 port_num = 15;
  bool is_evaluation = 19;
  bool gpu_soft_constraint = 21;
  bool use_tf_data_service = 23;

  PluginConfig plugin_config = 27;
  YarnScheduler role_scheduler = 28;
  ScheduleStrategy schedule_strategy = 29;
  int32 min_num = 30;
}

message PluginConfig {
  repeated Plugin basic_plugins = 1;
  repeated Plugin extend_plugins = 2;
  repeated Plugin disabled_plugins = 3;
}

message Plugin {
  string name = 1;
  string version = 2;
  map<string, string > parameter = 3;
}

enum RoleScheduleType {
  GANG = 0;
  DYNAMIC = 1;
}

message TimeoutPolicy {
  string role_name = 1;
  int32 schedule_percent = 2;
  int32 timeout_second = 3;
}

message GangSchedulePolicy {
  TimeoutPolicy timeout_policy = 1;
}

message DynamicSchedulePolicy {
  repeated TimeoutPolicy timeout_policy = 1;
}

message OrderSchedulePolicy {
  message RolePolicy {
    string role_name = 1;
    RoleScheduleType schedule_type = 2;
  }

  repeated RolePolicy role_policy = 3;
}

message PonySchedulePolicy {
  string ps_role_name = 1;
}

message SchedulePolicy {
  oneof schedule_policy {
    GangSchedulePolicy gang_policy = 1;
    DynamicSchedulePolicy dynamic_policy = 2;
    OrderSchedulePolicy order_policy = 3;
    PonySchedulePolicy pony_policy = 4;
  }
}

message Scheduler {
  int32 vcores = 1;
  int32 memory_mb = 2;
  int32 gpu_num = 3;
  int32 jvm_memory_mb = 4;
  string java_opts = 5;
  int32 register_retry_times = 6;
  int32 heartbeat_interval_ms = 7;
  int32 max_missed_heartbeat = 8;
  SchedulePolicy schedule_policy = 9;
  int32 max_allocation_num_each_round = 10;
  Attribute attribute = 11;
  map<string, string> env = 12;
  YarnScheduler yarn_scheduler = 13;
  string command = 14;
  YarnScheduler am_scheduler = 15;
  bool enable_update_resource = 16;
  KubernetesScheduler kubernetes_scheduler = 17;
  bool disable_container_succeed_app = 18;
}

enum ProgressManagerType {
  PM_ROLE = 0;
  PM_FILE = 1;
  PM_KAFKA = 2;
}

enum ChannelConfig {
  PRIMUS_WORKER_STD = 0;
  PRIMUS_WORKER_FIFO = 1;
}

message StdPipe {
}

message FifoPipe {
  int32 fifo_num = 1;
}

message EventLogConfig {
  message HdfsSink {
    string dir = 1;
  }

  oneof event_sink {
    HdfsSink hdfs_sink = 1;
  }
}

message BlacklistConfig {
  bool enabled = 1;
  int32 max_failed_task_per_container = 2;
  int32 max_failed_container_per_node = 3;
  int64 blacklist_timeout_millis = 4;
  int32 max_blacklist_container = 5;
  int32 max_blacklist_node = 6;
}

message MetricToTimelineEventBridgeConfig {
  int32 task_runner_feed_metric_collect_batch_size = 1;
  int32 worker_feeder_write_metric_collect_batch_size = 2;
}

message TimelineConfig {
  string channel = 1;
  int32 flush_size = 2;

  MetricToTimelineEventBridgeConfig metric_to_timeline_event_bridge_config = 10;
}

message KubernetesJobConf {
  string kubernetes_job_name = 1;
  string owner = 2; // defaults to submit user
  string psm = 3;
}

message UniqueNameConfig {
  enum UniqueType {
    REGION = 0;
  }
  UniqueType unique_type = 1;
}

message StateStore {
  message LocalStateStore {
  }

  message NasStateStore {
    string volume = 1;
  }

  oneof state_store {
    LocalStateStore local_state_store = 1;
    NasStateStore nas_state_store = 2;
  }
}

message ApiServerConf {
  StateStore state_store = 1;
}

message MigrationConf {
  bool global_migration_enabled = 1;
  int32 global_max_migration_limit = 2;
}

message ProgressManagerConf {
  bool rewind_allowed = 1;
}

message StatusEventLogConf {
  string topic = 1;
  string cluster = 2;
}

message PrimusConf {
  string queue = 1;
  string name = 2;
  repeated string files = 3;
  map<string, string> env = 4;
  string staging_dir = 5;
  int32 max_app_attempts = 6;
  repeated Role role = 7;
  Scheduler scheduler = 8;
  string history_hdfs_base = 12;
  int32 priority = 14;
  PortRange port_range = 15;
  string region = 16;
  ProgressManagerType progress_manager_type = 17;
  InputManager input_manager = 18;
  oneof channel_config {
    StdPipe std_pipe = 19;
    FifoPipe fifo_pipe = 20;
  }
  int64 sleep_before_exit_ms = 21;
  bool core_dump_enable = 22;
  RunningMode running_mode = 23; // TODO: Deprecate this
  map<string, string> custom_metric_tags = 24;
  int32 setup_port_retry_max_times = 25;
  EventLogConfig event_log_config = 26;
  BlacklistConfig blacklist_config = 27;
  repeated string yarn_application_tags = 28;
  TimelineConfig timeline_config = 29;
  int32 graceful_shutdown_timeout_min = 30;
  int32 am_allocation_timeout_min = 31;
  KubernetesJobConf kubernetes_job_conf = 32; // TODO: Move to runtime
  UniqueNameConfig unique_name_config = 33;
  ApiServerConf api_server_conf = 34;

  MigrationConf migration_conf = 35;
  int32 snapshot_copy_threads_cnt = 36;

  ProgressManagerConf progress_manager_conf = 37;
  StatusEventLogConf status_event_log_conf = 38;

  // Experimental zone
  RuntimeConf runtime_conf = 100;
}
