/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package primus;

option java_package = "com.bytedance.primus.proto";
option java_generate_equals_and_hash = true;

import "data.proto";
import "primus_common.proto";

message InputManager {

  oneof config {
    FileConfig file_config = 1;
    KafkaConfig kafka_config = 5;
  }

  WorkPreserve work_preserve = 10;

  // Advanced
  bool graceful_shutdown = 20;
  int32 graceful_shutdown_time_wait_sec = 21; // defaults to 1800 sec.

  int32 message_buffer_size = 30;
  bool message_buffer_force_flush = 31;
  int32 socket_send_buffer_size = 35;

  int32 max_task_num_per_worker = 40;
  int32 max_task_attempts = 41;
  int32 max_allowed_io_exception = 42;

  int32 num_build_task_threads = 50;
  int32 max_num_worker_feeder_clients = 51;
}

message FileConfig {
  message Input {
    string name = 1; // The name of this input source, defaults to its index.
    FileSourceSpec spec = 2;
  }
  repeated Input inputs = 1;

  // Advanced
  StopPolicy stop_policy = 20;
  float sample_rate = 21;
}

message KafkaConfig {
  enum KafkaMessageType {
    JSON = 0;
    PB = 1;
  }

  enum KafkaStartUpMode {
    GROUP_OFFSETS = 0;
    EARLIEST = 1;
    LATEST = 2;
    TIMESTAMP = 3;
  }

  message Topic {
    string topic = 2;
    string consumer_group = 3;
    map<string, string> config = 4;
    KafkaStartUpMode kafka_start_up_mode = 5;
    int64 start_up_timestamp = 6;
  }

  repeated Topic topics = 1;
  KafkaMessageType kafka_message_type = 2;
}

message StopPolicy {
  float task_success_percent = 1;
  float task_failed_percent = 2;
}

// TODO: Comment
message WorkPreserve {
  // General configurations
  int32 snapshot_id = 1;
  int32 dump_interval_sec = 2;

  // Storage specific configurations
  oneof config {
    HdfsConfig hdfs_config = 20;
  }
  message HdfsConfig {
    string staging_dir = 1;
  }
}
